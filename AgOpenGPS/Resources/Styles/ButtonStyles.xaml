<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml">

    <Thickness x:Key="ButtonPadding">11,5,11,6</Thickness>
    <Thickness x:Key="ButtonBorderThemeThickness">1</Thickness>
    <Thickness x:Key="ButtonIconMargin">0,0,8,0</Thickness>

    <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}">
        <!--  Universal WPF UI focus  -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <!--  Universal WPF UI focus  -->
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlFillColorDefault}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TextFillColorPrimary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="ContentBorder"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            TextElement.Foreground="{TemplateBinding Foreground}" />

                        <!--
                     Without the hacky workaround for the themes, we cannot use the freezable VisualState.

                     <VisualStateManager.VisualStateGroups>
                         <VisualStateGroup x:Name="CommonStates">
                             <VisualState x:Name="Normal" />
                             <VisualState x:Name="MouseOver">
                                 <Storyboard>
                                     <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Background">
                                         <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
                                     </ObjectAnimationUsingKeyFrames>
                                 </Storyboard>
                             </VisualState>
                             <VisualState x:Name="Pressed">
                                 <Storyboard>
                                     <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Background">
                                         <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlFillColorTertiaryBrush}" />
                                     </ObjectAnimationUsingKeyFrames>
                                     <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="BorderBrush">
                                         <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                                     </ObjectAnimationUsingKeyFrames>
                                     <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="(TextElement.Foreground)">
                                         <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource TextFillColorSecondaryBrush}" />
                                     </ObjectAnimationUsingKeyFrames>
                                 </Storyboard>
                             </VisualState>
                             <VisualState x:Name="Disabled">
                                 <Storyboard>
                                     <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="Background">
                                         <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlFillColorDisabledBrush}" />
                                     </ObjectAnimationUsingKeyFrames>
                                     <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentBorder" Storyboard.TargetProperty="BorderBrush">
                                         <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                                     </ObjectAnimationUsingKeyFrames>
                                     <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="(TextElement.Foreground)">
                                         <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource TextFillColorDisabledBrush}" />
                                     </ObjectAnimationUsingKeyFrames>
                                 </Storyboard>
                             </VisualState>
                         </VisualStateGroup>
                     </VisualStateManager.VisualStateGroups>
                        -->
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorDisabledBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorTertiaryBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorSecondaryBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource DefaultButtonStyle}" TargetType="{x:Type Button}" />

    <Style x:Key="DefaultUiButtonStyle" TargetType="ui:Button">
        <!--<Style.Resources>
            <Color x:Key="ControlFillColorDefault">#DAAC0C</Color>
            <Color x:Key="TextFillColorPrimary">white</Color>
        </Style.Resources>-->
        <!--  Universal WPF UI focus  -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <!--  Universal WPF UI focus  -->
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlFillColorDefault}" />
            </Setter.Value>
        </Setter>
        <Setter Property="MouseOverBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlFillColorSecondary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="PressedBackground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlFillColorTertiary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TextFillColorPrimary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="PressedForeground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TextFillColorSecondary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="PressedBorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
        <Setter Property="MouseOverBorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />

        <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="Appearance" Value="Secondary" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:Button}">
                    <Border
                        x:Name="ContentBorder"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <Border
                            Padding="{TemplateBinding Padding}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}">
                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter
                                    x:Name="ControlIcon"
                                    Grid.Column="0"
                                    Margin="{StaticResource ButtonIconMargin}"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Icon}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    Focusable="False"
                                    TextElement.FontSize="{TemplateBinding FontSize}"
                                    TextElement.Foreground="{TemplateBinding Foreground}" />

                                <ContentPresenter
                                    x:Name="ContentPresenter"
                                    Grid.Column="1"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Content}"
                                    TextElement.Foreground="{TemplateBinding Foreground}" />
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentBorder" Property="Background" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentBorder" Property="Background" Value="{Binding PressedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{Binding PressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding PressedForeground, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="ControlIcon" Property="TextElement.Foreground" Value="{Binding PressedForeground, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource ControlFillColorDisabledBrush}" />
                            <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="ControlIcon" Property="Margin" Value="0" />
                            <Setter TargetName="ControlIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  TRANSPARENT  -->
            <Trigger Property="Appearance" Value="Transparent">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>

            <!--  PRIMARY  -->
            <Trigger Property="Appearance" Value="Primary">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource SystemAccentColorSecondary}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.9" Color="{DynamicResource SystemAccentColorSecondary}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.7" Color="{DynamicResource SystemAccentColorSecondary}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorPrimary}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedForeground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorSecondary}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  DARK  -->
            <Trigger Property="Appearance" Value="Dark">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource ControlStrongFillColorDark}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Color="#62000000" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedBackground">
                    <Setter.Value>
                        <SolidColorBrush Color="#52000000" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorLightPrimary}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedForeground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorLightSecondary}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  LIGHT  -->
            <Trigger Property="Appearance" Value="Light">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource ControlStrongFillColorLight}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Color="#D3FFFFFF" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedBackground">
                    <Setter.Value>
                        <SolidColorBrush Color="#F3FFFFFF" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorDarkPrimary}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedForeground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorDarkSecondary}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  INFO  -->
            <Trigger Property="Appearance" Value="Info">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PaletteLightBlueColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.9" Color="{DynamicResource PaletteLightBlueColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.7" Color="{DynamicResource PaletteLightBlueColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TextFillColorLightPrimary}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  DANGER  -->
            <Trigger Property="Appearance" Value="Danger">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PaletteRedColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.9" Color="{DynamicResource PaletteRedColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.7" Color="{DynamicResource PaletteRedColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  SUCCESS  -->
            <Trigger Property="Appearance" Value="Success">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PaletteGreenColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.9" Color="{DynamicResource PaletteGreenColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.7" Color="{DynamicResource PaletteGreenColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  CAUTION  -->
            <Trigger Property="Appearance" Value="Caution">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource PaletteOrangeColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="MouseOverBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.9" Color="{DynamicResource PaletteOrangeColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="PressedBackground">
                    <Setter.Value>
                        <SolidColorBrush Opacity="0.7" Color="{DynamicResource PaletteOrangeColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style
        x:Key="CustDefaultUiButtonStyle"
        BasedOn="{StaticResource DefaultUiButtonStyle}"
        TargetType="ui:Button">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="40" />

        <Setter Property="MinHeight" Value="100" />

    </Style>

    <Style
        x:Key="CustPrimeryButton"
        BasedOn="{StaticResource CustDefaultUiButtonStyle}"
        TargetType="ui:Button">
        <Setter Property="Appearance" Value="Primary" />
        <Setter Property="Foreground" Value="White" />

    </Style>


    <Style
        x:Key="RoundButtonCustom"
        BasedOn="{StaticResource CustDefaultUiButtonStyle}"
        TargetType="{x:Type ui:Button}">
        <Setter Property="CornerRadius" Value="100" />
        <Setter Property="Height" Value="60" />
        <Setter Property="Width" Value="60" />
        <Setter Property="MinWidth" Value="60" />
        <Setter Property="MinHeight" Value="60" />
    </Style>

    <Style
        x:Key="RoundButtonCustomPrimary"
        BasedOn="{StaticResource RoundButtonCustom}"
        TargetType="{x:Type ui:Button}">

        <Setter Property="Appearance" Value="Primary" />
        <Setter Property="Height" Value="45" />
        <Setter Property="Width" Value="45" />
        <Setter Property="MinWidth" Value="45" />
        <Setter Property="MinHeight" Value="45" />

    </Style>











    <!--#region Toggle Button-->

    <Style x:Key="DefaultToggleButtonStyle" TargetType="{x:Type ToggleButton}">



        <!--  Universal WPF UI focus  -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <!--  Universal WPF UI focus  -->
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource ControlFillColorDefault}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TextFillColorPrimary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource ToggleButtonBorderThemeThickness}" />
        <Setter Property="Padding" Value="{StaticResource ToggleButtonPadding}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border
                        x:Name="ContentBorder"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        MinWidth="{TemplateBinding MinWidth}"
                        MinHeight="{TemplateBinding MinHeight}"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorDisabledBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource SystemAccentColorSecondary}" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorPrimary}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.8" Color="{DynamicResource SystemAccentColorSecondary}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorTertiaryBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorSecondaryBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.8" Color="{DynamicResource SystemAccentColorSecondary}" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorDisabled}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource DefaultToggleButtonStyle}" TargetType="ToggleButton">
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="16" />
    </Style>

    <Style
        x:Key="ToggleButtonDanger"
        BasedOn="{StaticResource DefaultToggleButtonStyle}"
        TargetType="ToggleButton">
        <Style.Resources>
            <Color x:Key="SystemAccentColorSecondary">Red</Color>
        </Style.Resources>
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="16" />

    </Style>
    <!--#endregion-->

    <!--#region Radio Button-->
    <Style x:Key="DefaultRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <!--  Universal WPF UI focus  -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <!--  Universal WPF UI focus  -->
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource SystemAccentColorSecondary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TextFillColorPrimary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{StaticResource RadioButtonPadding}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Height="32" VerticalAlignment="Top">
                            <Ellipse
                                x:Name="OuterEllipse"
                                Width="{StaticResource RadioButtonOuterEllipseSize}"
                                Height="{StaticResource RadioButtonOuterEllipseSize}"
                                Stroke="{DynamicResource ControlElevationBorderBrush}"
                                StrokeThickness="{StaticResource RadioButtonStrokeThickness}"
                                UseLayoutRounding="False">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{DynamicResource ControlAltFillColorSecondary}" />
                                </Ellipse.Fill>
                            </Ellipse>
                            <!--  A seperate element is added since the two orthogonal state groups that cannot touch the same property  -->
                            <Ellipse
                                x:Name="CheckOuterEllipse"
                                Width="{StaticResource RadioButtonOuterEllipseSize}"
                                Height="{StaticResource RadioButtonOuterEllipseSize}"
                                Fill="{TemplateBinding Background}"
                                Opacity="0"
                                Stroke="{TemplateBinding Background}"
                                StrokeThickness="{StaticResource RadioButtonStrokeThickness}"
                                UseLayoutRounding="False" />
                            <Ellipse
                                x:Name="CheckGlyph"
                                Width="{StaticResource RadioButtonCheckGlyphSize}"
                                Height="{StaticResource RadioButtonCheckGlyphSize}"
                                Opacity="0"
                                Stroke="{DynamicResource CircleElevationBorderBrush}"
                                UseLayoutRounding="False">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorPrimary}" />
                                </Ellipse.Fill>
                                <Ellipse.LayoutTransform>
                                    <ScaleTransform ScaleX="1.0" ScaleY="1.0" />
                                </Ellipse.LayoutTransform>
                            </Ellipse>
                            <!--  A seperate element is added since the two orthogonal state groups that cannot touch the same property  -->
                            <Border
                                x:Name="PressedCheckGlyph"
                                Width="4"
                                Height="4"
                                BorderBrush="{DynamicResource CircleElevationBorderBrush}"
                                CornerRadius="6"
                                Opacity="0"
                                UseLayoutRounding="False">
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorPrimary}" />
                                </Border.Background>
                            </Border>
                        </Grid>
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- Clunky, todo
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleY)"
                                            From="1.0"
                                            To="1.2"
                                            Duration="00:00:00.167" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleX)"
                                            From="1.0"
                                            To="1.2"
                                            Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleY)"
                                            From="1.2"
                                            To="1.0"
                                            Duration="00:00:00.167" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleX)"
                                            From="1.2"
                                            To="1.0"
                                            Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1.0" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1.0" />
                            <Setter TargetName="OuterEllipse" Property="Opacity" Value="0.0" />
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="1.0" />
                        </Trigger>
                        <Trigger Property="FlowDirection" Value="RightToLeft">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterEllipse" Property="Fill" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="0.86" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="0.7" />
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="0.7" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource DefaultRadioButtonStyle}" TargetType="{x:Type RadioButton}" />
    <Style
        x:Key="ImageRadioButton"
        BasedOn="{StaticResource DefaultRadioButtonStyle}"
        TargetType="{x:Type RadioButton}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
                        x:Name="BackgroundRect"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Background="{StaticResource ControlFillColorDefaultBrush}">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BackgroundRect" Property="Background" Value="LightGreen" />
                            <!--  Replace with your checked background brush  -->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.8" Color="{DynamicResource SystemAccentColorSecondary}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlFillColorTertiaryBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource TextFillColorSecondaryBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Opacity="0.8" Color="{DynamicResource SystemAccentColorSecondary}" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}" />
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorDisabled}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>



    <!--#endregion-->

</ResourceDictionary>